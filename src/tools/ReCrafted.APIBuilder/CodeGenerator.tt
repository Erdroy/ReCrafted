<#@ template language="C#" #>
<#@ parameter type="ReCrafted.APIBuilder.Tags.APITagFile" name="Desc" #>
// ReCrafted © 2016-2017 Always Too Late
// WARNING: Auto-generated file, all changes will be lost when the API code will be regenerated!
// Generated: <#=DateTime.Now#> Source: '<#=Desc.SourceFileName#>' Target: '<#=Desc.TargetFileName#>'

<#
foreach (var usingDesc in Desc.Usings)
{
#>
using <#=usingDesc.Namespace#>;
<#
} 
#>
using System;
using System.Runtime.CompilerServices;

<#
foreach (var classDesc in Desc.Classes)
{
#>
namespace <#=classDesc.Namespace#> 
{
<#
// ------------- CLASS -------------
var classComment = classDesc.Comment;
var classAccess = classDesc.GetAccess();
var classModifier = classDesc.GetModifier();
var className = classDesc.Name;
var classInherit = string.IsNullOrEmpty(classDesc.BaseName) ? "" : ": " + classDesc.BaseName;
var classPartial = classDesc.IsPartial ? "partial " : "";
#>
<#
if(!string.IsNullOrEmpty(classComment))
{
#>
	/// <summary>
	///	<#=classComment#>
	/// </summary>
<#
}
#>
	<#=classAccess#> <#=classModifier#><#=classPartial#>class <#=className#> <#=classInherit#>
	{
<#
    if (classDesc.NoConstructor)
    {#>
        internal <#=className#>() {}

<#  }

// ------------- METHOD -------------
foreach (var methodDesc in classDesc.Methods)
{
	var methodAccess = methodDesc.GetAccess();
	var methodModifier = methodDesc.GetModifier();
	var methodName = methodDesc.Name;
	var methodExtern = methodDesc.IsExtern ? "extern " : "";
	var methodReturn = string.IsNullOrEmpty(methodDesc.ReturnType) ? "void" : methodDesc.ReturnType;
	var methodParams = "";
    var methodParamsCall = "";
	foreach(var param in methodDesc.Parameters)
	{
	    if (methodParams.Length > 1)
	    {
	        methodParams += ", ";
	        methodParamsCall += ", ";
	    }

		if(param.IsRef)
			methodParams += "ref ";
		else if(param.IsOut)
			methodParams += "out ";

	    methodParamsCall += param.Name;
		methodParams += param.Type + " " + param.Name;
	}
#>
<#
	if(!string.IsNullOrEmpty(methodDesc.Comment))
	{
#>
		/// <summary>
		///	<#=methodDesc.Comment#>
		/// </summary>
<#
	}
    if (methodDesc.IsExtern && methodDesc.Modifier != APIParameters.Static) { 
        if(!methodDesc.NoProxy) 
        {
#>
		<#=methodAccess#> <#=methodModifier#><#=methodReturn#> <#=methodName#>(<#=methodParams#>)
		{
			Internal_<#=methodName#>(NativePtr<#if(methodDesc.Parameters.Count > 0){#>, <#=methodParamsCall#><#}#>);
		}
        
        <#}#>
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern <#=methodReturn#> Internal_<#=methodName#>(IntPtr nativePtr<#if(methodDesc.Parameters.Count > 0){#>, <#=methodParams#><#}#>);
		<#
    }
    else
    {
		if(methodDesc.IsExtern)
		{
#>
		[MethodImpl(MethodImplOptions.InternalCall)]
<#
		}
#>
		<#=methodAccess#> <#=methodModifier#><#=methodExtern#><#=methodReturn#> <#=methodName#>(<#=methodParams#>)<#if(methodDesc.IsExtern || methodDesc.Modifier == APIParameters.Abstract){#>;
<#}#>
<#
		if(!methodDesc.IsExtern && methodDesc.Modifier != APIParameters.Abstract)
		{
#>

		{
<#
			foreach(var codeLine in methodDesc.CodeLines)
			{
#>
			<#=codeLine#>
<#
			}
#>
		}
<#
		} 
    }
#>

<#
}
// ---------- METHOD END ----------
#>
<#
//  ---------- PROPERTY ----------

	// define properties
    foreach (var propertyDesc in classDesc.Properties)
    {
        if (!string.IsNullOrEmpty(propertyDesc.Comment))
        {
#>
		/// <summary>
		///	<#=propertyDesc.Comment #>
		/// </summary>
		<#=propertyDesc.GetAccess()#> <#=propertyDesc.GetModifier()#><#=propertyDesc.Type#> <#=propertyDesc.Name#> 
		{
			get
			{
<#
            if (propertyDesc.ByRef)
            {
#>
				<#=propertyDesc.Type#> result;
				Internal_<#=propertyDesc.Name#>_Get(<#if (propertyDesc.Modifier != APIParameters.Static) { #>NativePtr, <#}#>out result);
				return result;
<#
            }
            else
            {
#>
				return Internal_<#=propertyDesc.Name#>_Get(<#if (propertyDesc.Modifier != APIParameters.Static) { #>NativePtr<#}#>);
<#
            }
#>
			}
<#
			if(!propertyDesc.GetOnly)
			{
#>
			set
			{
<#
				if (propertyDesc.ByRef)
				{
#>
				Internal_<#=propertyDesc.Name#>_Set(<#if (propertyDesc.Modifier != APIParameters.Static) { #>NativePtr, <#}#>ref value);
<#
				}
				else
				{
#>
				Internal_<#=propertyDesc.Name#>_Set(<#if (propertyDesc.Modifier != APIParameters.Static) { #>NativePtr, <#}#>value);
<#
				}
#>
			}
<#
			}
#>
		}

<#
        }
    }

    // define get/set methods
    foreach (var propertyDesc in classDesc.Properties)
    {
        var getReturn = propertyDesc.ByRef ? "void" : propertyDesc.Type;
        var getParams = "";
        var setParams = "";

        if (propertyDesc.Modifier != APIParameters.Static)
        {
            getParams = "IntPtr nativePtr";

            if (propertyDesc.ByRef)
                getParams += ", ";

            setParams = "IntPtr nativePtr, ";
        }

        if (propertyDesc.ByRef)
        {
            setParams += "ref ";
            getParams += "out " + propertyDesc.Type + " result";
        }

        setParams += propertyDesc.Type + " value";

        if (propertyDesc.GetOnly)
        {
#>
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern <#=getReturn#> Internal_<#=propertyDesc.Name #>_Get(<#=getParams#>);
<#
        }
        else
        {
#>
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern void Internal_<#=propertyDesc.Name #>_Set(<#=setParams#>);
		[MethodImpl(MethodImplOptions.InternalCall)]
		internal static extern <#=getReturn#> Internal_<#=propertyDesc.Name #>_Get(<#=getParams#>);
<#
        }
    }
//  ---------- PROPERTY END ----------
#>
	}
<# // ---------- CLASS END ---------- #>
}
<#
}
#>