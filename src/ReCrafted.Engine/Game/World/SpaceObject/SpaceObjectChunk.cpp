// ReCrafted © 2016-2017 Always Too Late

#include "SpaceObjectChunk.h"
#include "SpaceObjectOctree.h"
#include "SpaceObject.h"
#include "Graphics/DebugDraw.h"
#include "Graphics/Mesh.h"
#include "Graphics/Rendering.h"
#include "Meshing/MarchingCubes/MCMesher.h"
#include "Game/World/Voxels/VoxelUtils.h"

float Sphere(Vector3& origin, Vector3& position, float radius)
{
	if (position.y < 0.0f)
		return -1;
	return 1;

	return (position - origin).length() - radius * radius;
}

void SpaceObjectChunk::init(SpaceObjectOctreeNode* node, SpaceObject* spaceObject)
{
	this->spaceObject = spaceObject;
	this->node = node;

	m_chunkNormal = spaceObject->get_position() - node->get_position();
	m_chunkNormal.normalize();
}

void SpaceObjectChunk::generate()
{
	m_mesh = Mesh::createMesh();

	// TODO: 'VoxelProcessor'

	// generate voxel data
	auto dataSize = ChunkDataSize * ChunkDataSize * ChunkDataSize;
	m_voxelData = new sbyte[dataSize];
	SecureZeroMemory(m_voxelData, dataSize * sizeof(sbyte));

	// temporary, just for testing, this will be generated by VoxelGenerator TODO: VoxelGenerator
	auto nodePosition = node->get_position();
	auto objectPosition = spaceObject->get_position();
	auto objectRadius = 8.0f;
	for(auto x = 0; x < ChunkDataSize; x ++)
	{
		for (auto y = 0; y < ChunkDataSize; y++)
		{
			for (auto z = 0; z < ChunkDataSize; z++)
			{
				auto index = INDEX_3D(x, y, z, ChunkDataSize);
				auto position = nodePosition + Vector3(x, y, z) * node->get_size();

				auto value = Sphere(objectPosition, position, objectRadius);
				m_voxelData[index] = static_cast<sbyte>(value) * 127.0f; // convert to voxel data
			}
		}
	}

	// generate mesh
	MCMesher::getInstance()->generate(node->get_position(), m_mesh, m_voxelData);

	// upload changes
	m_mesh->upload();
}

void SpaceObjectChunk::update()
{
	DebugDraw::setColor(Color(0, 255, 0));
	DebugDraw::drawLine(node->get_position(), node->get_position() + m_chunkNormal * node->get_size() * 0.3f);
	DebugDraw::drawCube(node->get_position() + m_chunkNormal * node->get_size() * 0.3f, Vector3::one());
}

void SpaceObjectChunk::draw()
{
	if (!m_mesh || !m_mesh->isUploaded())
		return;

	Rendering::getInstance()->setState();

	auto matrix = Matrix::identity();
	Rendering::getInstance()->draw(m_mesh, &matrix);
}

void SpaceObjectChunk::dispose()
{
	SafeDelete(m_voxelData);
	SafeDispose(m_mesh);
}
