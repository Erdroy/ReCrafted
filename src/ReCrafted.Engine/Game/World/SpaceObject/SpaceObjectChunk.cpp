// ReCrafted © 2016-2017 Always Too Late

#include "SpaceObjectChunk.h"
#include "SpaceObjectOctree.h"
#include "SpaceObject.h"
#include "Graphics/DebugDraw.h"
#include "Graphics/Mesh.h"
#include "Graphics/Rendering.h"
#include "Meshing/MarchingCubes/MCMesher.h"
#include "Game/World/Voxels/VoxelUtils.h"
#include "Common/Input.h"

float Planet(Vector3& origin, Vector3& position, float radius)
{
	var height = (position - origin).length();

	var t = position.z / position.x;
	
	if (position.x < 0.0f)
		t += PI;
	
	var u = asin(position.y / height);

	return height - radius;
}

void SpaceObjectChunk::init(SpaceObjectOctreeNode* node, SpaceObject* spaceObject)
{
	this->spaceObject = spaceObject;
	this->node = node;

	m_chunkNormal = spaceObject->get_position() - node->get_position();
	m_chunkNormal.normalize();
}

void SpaceObjectChunk::generate()
{
	m_mesh = Mesh::createMesh();

	// TODO: 'VoxelProcessor'

	// generate voxel data
	var dataSize = ChunkDataSize * ChunkDataSize * ChunkDataSize;
	m_voxelData = new sbyte[dataSize];
	SecureZeroMemory(m_voxelData, dataSize * sizeof(sbyte));

	// temporary, just for testing, this will be generated by VoxelGenerator TODO: VoxelGenerator
	var objectPosition = spaceObject->get_position();
	var objectRadius = 100.0f;
	var posMod = Vector3::one() * 0.5f * node->get_size();
	var nodePosition = node->get_position() - posMod; // lower-left-back corner

	var sizeMod = node->get_size() / float(SpaceObjectOctreeNode::MinimumNodeSize);

	for(auto x = 0; x < ChunkDataSize; x ++)
	{
		for (auto y = 0; y < ChunkDataSize; y++)
		{
			for (auto z = 0; z < ChunkDataSize; z++)
			{
				var index = INDEX_3D(x, y, z, ChunkDataSize);
				var position = nodePosition + (Vector3(x, y, z) - Vector3::one()) * sizeMod;

				var value = Planet(objectPosition, position, objectRadius);
				var byteValue = static_cast<sbyte>(Math::clamp(value * 127.0f, -127.0f, 127.0f));

				m_voxelData[index] = byteValue; // convert to voxel data
			}
		}
	}

	// generate mesh
	MCMesher::getInstance()->generate(nodePosition, sizeMod, m_mesh, m_voxelData); // TODO: 'VoxelProcessor'

	// upload changes
	m_mesh->upload();
}

void SpaceObjectChunk::update()
{
	if (Input::isKey(Key_F2))
	{
		DebugDraw::setColor(Color(0, 255, 0));
		DebugDraw::drawLine(node->get_position(), node->get_position() + m_chunkNormal * node->get_size() * 0.3f);
		DebugDraw::drawCube(node->get_position() + m_chunkNormal * node->get_size() * 0.3f, Vector3::one());
	}
}

void SpaceObjectChunk::draw()
{
	if (!m_mesh || !m_mesh->isUploaded())
		return;

	Rendering::getInstance()->setState();

	auto matrix = Matrix::identity();
	Rendering::getInstance()->draw(m_mesh, &matrix);
}

void SpaceObjectChunk::dispose()
{
	SafeDelete(m_voxelData);
	SafeDispose(m_mesh);
}
