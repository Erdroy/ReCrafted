<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter type="ReCrafted.Tools.APIGenerator.Descriptions.ClassDescription" name="Class" #>
<#@ parameter type="System.Collections.Generic.List<ReCrafted.Tools.APIGenerator.Descriptions.FunctionDescription>" name="Functions" #>
<#@ parameter type="System.Collections.Generic.List<ReCrafted.Tools.APIGenerator.Descriptions.PropertyDescription>" name="Properties" #>
// ReCrafted (c) 2016-2019 Damian 'Erdroy' Korczowski. All rights reserved.
// WARNING: Auto-generated file. All changes will be lost when the API code will be regenerated!

#include "<#=Generator.Instance.InputFileName#>.h"
#include "Scripting/Mono.h"
#include "Scripting/ScriptingManager.h"
#include "Scripting/Assembly.h"

class APIProxy
{
public:
<#
foreach(var function in Functions)
{
#>
    
    static <#=function.ReturnType.ToSpecial(true)#> <#=Class.Name#>_<#=function.Name#>(<#=function.GetCPlusPlusParameters(Class, !function.IsStatic)#>) 
    {
        MAIN_THREAD_ONLY();
<#
    // ---- Special type conversions ----
    foreach(var parameter in function.Parameters)
    {
        if(parameter.Type.IsSpecial)
        {
#>
        ASSERT(p_<#=parameter.Name#>);
        const auto <#=parameter.Name#> = <#=parameter.Type.GetSpecialConversion()#>(p_<#=parameter.Name#>);
<#
        }
    }

    // ---- Static function impl ----
    if(function.IsStatic)
    {
        if(function.ReturnType.BaseType != "void")
        {
#>
        const auto _returnValue = <#=Class.Name#>::<#=function.Name#>(<#=function.GetCPlusPlusParametersRedirect()#>);
<#
        }
        else
        {
#>
        <#=Class.Name#>::<#=function.Name#>(<#=function.GetCPlusPlusParametersRedirect()#>);
<#      
        }
    }
    else // ---- Member function impl ----
    {
#>
        ASSERT(instance);
<#
        if(function.ReturnType.BaseType != "void")
        {
#>
        const auto _returnValue = instance-><#=function.Name#>(<#=function.GetCPlusPlusParametersRedirect()#>);
<#
        }
        else
        {
#>
        instance-><#=function.Name#>(<#=function.GetCPlusPlusParametersRedirect()#>);
<#      
        }
    }
    // ---- Special type free ----
    foreach(var parameter in function.Parameters)
    {
        if(parameter.Type.IsSpecial)
        {
#>
        <#=parameter.Type.GetSpecialFree()#>(<#=parameter.Name#>);
<#
        }
    }
    if(function.ReturnType.BaseType != "void")
    {
        if(function.ReturnType.IsSpecial)
        {
#>
        return <#=function.ReturnType.GetSpecialReturnConversion()#>(_returnValue);
<#
        }
        else
        {
            if(function.ReturnType.CastToManaged)
            {       
#>
        return _returnValue->ToManaged();
<#
            }
            else
            {       
#>
        return _returnValue;
<#
            } 
        }
    }
#>
    }
<#
}

foreach(var property in Properties)
{
    if(property.HasGetter)
    {
#>
    
    static void <#=Class.Name#>_Get_<#=property.Name#>(<#=property.GetCPlusPlusParameter(Class, true)#>) 
    {
        MAIN_THREAD_ONLY();
<#
if(!property.IsStatic)
{
#>
        ASSERT(instance);   
        const auto _returnValue = instance-><#=property.GetterFunctionName#>()<#if(property.Type.CastToManaged){#>->ToManaged()<#}#>;
<#
    if(property.Type.IsSpecial)
    {
#>
        *p_data = <#=property.Type.GetSpecialReturnConversion()#>(_returnValue);
<#
    }
    else
    {
#>
        *data = _returnValue;
<#
    }
}
#>
    }
<#
    }
    if(property.HasSetter)
    {
#>

    static void <#=Class.Name#>_Set_<#=property.Name#>(<#=property.GetCPlusPlusParameter(Class, false)#>) 
    {
        MAIN_THREAD_ONLY();
<# 
if(property.Type.IsSpecial)
{
#>
        ASSERT(p_data);
        const auto data = <#=property.Type.GetSpecialConversion()#>(*p_data);
<#
}
if(!property.IsStatic)
{
#>
        ASSERT(instance);
        instance-><#=property.SetterFunctionName#>(<#if(!property.Type.IsSpecial){#>*<#}#>data);
<#
}        
if(property.Type.IsSpecial)
{
#>
        <#=property.Type.GetSpecialFree()#>(data);
<#
}
#>
    }
<#
    }
}

if(!Class.IsStatic && !string.IsNullOrEmpty(Class.Inherits) && !Class.IsAbstract)
{
#>
    
    static Object* <#=Class.Name#>_CreateObject(bool createManagedInstance)
    {
        return createManagedInstance ? Object::New<<#=Class.Name#>>() : new <#=Class.Name#>();
    }
<#
}
#>
};

void <#=Class.Name#>::InitRuntime() 
{
<#
if(!Class.IsStatic && !string.IsNullOrEmpty(Class.Inherits) && !Class.IsAbstract)
{
#>
    MONO_REGISTER_OBJECT(&APIProxy::<#=Class.Name#>_CreateObject);
    
<#
}
#>
<#
// ---- Function bindings ----
foreach(var function in Functions)
{
#>
    API_BIND("<#=Class.Namespace#>.<#=Class.Name#>::Internal<#=function.Name#>", &APIProxy::<#=Class.Name#>_<#=function.Name#>);
<#
}
foreach(var property in Properties)
{
    if(property.HasGetter)
    {
#>
    API_BIND("<#=Class.Namespace#>.<#=Class.Name#>::Get_Internal<#=property.Name#>", &APIProxy::<#=Class.Name#>_Get_<#=property.Name#>);
<#
    }
    if(property.HasSetter)
    {
#>
    API_BIND("<#=Class.Namespace#>.<#=Class.Name#>::Set_Internal<#=property.Name#>", &APIProxy::<#=Class.Name#>_Set_<#=property.Name#>);
<#
    }
}
#>
}

const char* <#=Class.Name#>::Fullname() 
{
    return "<#=Class.Namespace#>.<#=Class.Name#>";
}

const char* <#=Class.Name#>::Name() 
{
    return "<#=Class.Name#>";
}

const char* <#=Class.Name#>::Namespace() 
{
    return "<#=Class.Namespace#>";
}