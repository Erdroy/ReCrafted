// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace ReCrafted.Tools.APIGenerator.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using ReCrafted.Tools.APIGenerator;
    using ReCrafted.Tools.APIGenerator.Descriptions;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\ReCrafted\Source\Tools\ReCrafted.Tools.APIGenerator\Templates\CSharpTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class CSharpTemplate : CSharpTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("// ReCrafted (c) 2016-2019 Damian \'Erdroy\' Korczowski. All rights reserved.\r\n// W" +
                    "ARNING: Auto-generated file. All changes will be lost when the API code will be " +
                    "regenerated!\r\n\r\n");
            
            #line 14 "D:\ReCrafted\Source\Tools\ReCrafted.Tools.APIGenerator\Templates\CSharpTemplate.tt"

foreach(var usingNamespace in Generator.Instance.Usings)
{

            
            #line default
            #line hidden
            this.Write("using ");
            
            #line 18 "D:\ReCrafted\Source\Tools\ReCrafted.Tools.APIGenerator\Templates\CSharpTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(usingNamespace));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 19 "D:\ReCrafted\Source\Tools\ReCrafted.Tools.APIGenerator\Templates\CSharpTemplate.tt"

}

            
            #line default
            #line hidden
            this.Write("using System.Runtime.CompilerServices;\r\n\r\nnamespace ");
            
            #line 24 "D:\ReCrafted\Source\Tools\ReCrafted.Tools.APIGenerator\Templates\CSharpTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Class.Namespace));
            
            #line default
            #line hidden
            this.Write(" \r\n{\r\n    ");
            
            #line 26 "D:\ReCrafted\Source\Tools\ReCrafted.Tools.APIGenerator\Templates\CSharpTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Class.GetModifiers()));
            
            #line default
            #line hidden
            this.Write(" class ");
            
            #line 26 "D:\ReCrafted\Source\Tools\ReCrafted.Tools.APIGenerator\Templates\CSharpTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Class.Name));
            
            #line default
            #line hidden
            
            #line 26 "D:\ReCrafted\Source\Tools\ReCrafted.Tools.APIGenerator\Templates\CSharpTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Class.GetGenerics()));
            
            #line default
            #line hidden
            
            #line 26 "D:\ReCrafted\Source\Tools\ReCrafted.Tools.APIGenerator\Templates\CSharpTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Class.GetInheritance()));
            
            #line default
            #line hidden
            this.Write("\r\n    {\r\n");
            
            #line 28 "D:\ReCrafted\Source\Tools\ReCrafted.Tools.APIGenerator\Templates\CSharpTemplate.tt"


//      \/ ---- GENERATE FUNCTIONS ---- \/
foreach(var function in Functions)
{
    if(!function.Extern)
    {

            
            #line default
            #line hidden
            this.Write("\r\n        ");
            
            #line 37 "D:\ReCrafted\Source\Tools\ReCrafted.Tools.APIGenerator\Templates\CSharpTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(function.GetModifiers()));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 37 "D:\ReCrafted\Source\Tools\ReCrafted.Tools.APIGenerator\Templates\CSharpTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(function.ReturnType.ToCSharp()));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 37 "D:\ReCrafted\Source\Tools\ReCrafted.Tools.APIGenerator\Templates\CSharpTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(function.Name));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 37 "D:\ReCrafted\Source\Tools\ReCrafted.Tools.APIGenerator\Templates\CSharpTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(function.GetCSharpParameters()));
            
            #line default
            #line hidden
            this.Write(")\r\n        {\r\n");
            
            #line 39 "D:\ReCrafted\Source\Tools\ReCrafted.Tools.APIGenerator\Templates\CSharpTemplate.tt"

        if(function.ReturnType.BaseType != "void")
        {

            
            #line default
            #line hidden
            this.Write("            return Internal");
            
            #line 43 "D:\ReCrafted\Source\Tools\ReCrafted.Tools.APIGenerator\Templates\CSharpTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(function.Name));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 43 "D:\ReCrafted\Source\Tools\ReCrafted.Tools.APIGenerator\Templates\CSharpTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(function.GetCSharpParametersRedirect()));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 44 "D:\ReCrafted\Source\Tools\ReCrafted.Tools.APIGenerator\Templates\CSharpTemplate.tt"

        }
        else
        {

            
            #line default
            #line hidden
            this.Write("            Internal");
            
            #line 49 "D:\ReCrafted\Source\Tools\ReCrafted.Tools.APIGenerator\Templates\CSharpTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(function.Name));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 49 "D:\ReCrafted\Source\Tools\ReCrafted.Tools.APIGenerator\Templates\CSharpTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(function.GetCSharpParametersRedirect()));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 50 "D:\ReCrafted\Source\Tools\ReCrafted.Tools.APIGenerator\Templates\CSharpTemplate.tt"
      
        }

            
            #line default
            #line hidden
            this.Write("        }\r\n");
            
            #line 54 "D:\ReCrafted\Source\Tools\ReCrafted.Tools.APIGenerator\Templates\CSharpTemplate.tt"

    }
}
//      /\ ---- GENERATE FUNCTIONS ---- /\

//      \/ ---- GENERATE PROPERTIES ---- \/
foreach(var property in Properties)
{

            
            #line default
            #line hidden
            this.Write("        \r\n        ");
            
            #line 64 "D:\ReCrafted\Source\Tools\ReCrafted.Tools.APIGenerator\Templates\CSharpTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.GetModifiers()));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 64 "D:\ReCrafted\Source\Tools\ReCrafted.Tools.APIGenerator\Templates\CSharpTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Type.ToCSharp()));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 64 "D:\ReCrafted\Source\Tools\ReCrafted.Tools.APIGenerator\Templates\CSharpTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write("\r\n        {\r\n");
            
            #line 66 "D:\ReCrafted\Source\Tools\ReCrafted.Tools.APIGenerator\Templates\CSharpTemplate.tt"

    if(property.HasGetter)
    {

            
            #line default
            #line hidden
            this.Write("            get\r\n            {\r\n                Get_Internal");
            
            #line 72 "D:\ReCrafted\Source\Tools\ReCrafted.Tools.APIGenerator\Templates\CSharpTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 72 "D:\ReCrafted\Source\Tools\ReCrafted.Tools.APIGenerator\Templates\CSharpTemplate.tt"
if(!property.IsStatic){
            
            #line default
            #line hidden
            this.Write("NativePtr, ");
            
            #line 72 "D:\ReCrafted\Source\Tools\ReCrafted.Tools.APIGenerator\Templates\CSharpTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("out var data);\r\n                return data;\r\n            }\r\n");
            
            #line 75 "D:\ReCrafted\Source\Tools\ReCrafted.Tools.APIGenerator\Templates\CSharpTemplate.tt"

    }
    if(property.HasSetter)
    {

            
            #line default
            #line hidden
            this.Write("            set => Set_Internal");
            
            #line 80 "D:\ReCrafted\Source\Tools\ReCrafted.Tools.APIGenerator\Templates\CSharpTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 80 "D:\ReCrafted\Source\Tools\ReCrafted.Tools.APIGenerator\Templates\CSharpTemplate.tt"
if(!property.IsStatic){
            
            #line default
            #line hidden
            this.Write("NativePtr, ");
            
            #line 80 "D:\ReCrafted\Source\Tools\ReCrafted.Tools.APIGenerator\Templates\CSharpTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("ref value");
            
            #line 80 "D:\ReCrafted\Source\Tools\ReCrafted.Tools.APIGenerator\Templates\CSharpTemplate.tt"
if(property.Type.CastToManaged){
            
            #line default
            #line hidden
            this.Write(".NativePtr");
            
            #line 80 "D:\ReCrafted\Source\Tools\ReCrafted.Tools.APIGenerator\Templates\CSharpTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 81 "D:\ReCrafted\Source\Tools\ReCrafted.Tools.APIGenerator\Templates\CSharpTemplate.tt"

    }

            
            #line default
            #line hidden
            this.Write("        }\r\n");
            
            #line 85 "D:\ReCrafted\Source\Tools\ReCrafted.Tools.APIGenerator\Templates\CSharpTemplate.tt"

}
//      /\ ---- GENERATE PROPERTIES ---- /\

//      \/ ---- GENERATE EXTERN FUNCTIONS ---- \/
// Note: Objects passing to the C++ wrapper, does need to get pointer, not MonoObject.
foreach(var function in Functions)
{

            
            #line default
            #line hidden
            this.Write("\r\n        [MethodImpl(MethodImplOptions.InternalCall)]\r\n        private static ex" +
                    "tern ");
            
            #line 96 "D:\ReCrafted\Source\Tools\ReCrafted.Tools.APIGenerator\Templates\CSharpTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(function.ReturnType.ToCSharp()));
            
            #line default
            #line hidden
            this.Write(" Internal");
            
            #line 96 "D:\ReCrafted\Source\Tools\ReCrafted.Tools.APIGenerator\Templates\CSharpTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(function.Name));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 96 "D:\ReCrafted\Source\Tools\ReCrafted.Tools.APIGenerator\Templates\CSharpTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(function.GetCSharpParameters(true, false)));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 97 "D:\ReCrafted\Source\Tools\ReCrafted.Tools.APIGenerator\Templates\CSharpTemplate.tt"

}
//      /\ ---- GENERATE EXTERN FUNCTIONS ---- /\

//      \/ ---- GENERATE EXTERN PROPERTIES ---- \/

            
            #line default
            #line hidden
            
            #line 103 "D:\ReCrafted\Source\Tools\ReCrafted.Tools.APIGenerator\Templates\CSharpTemplate.tt"

foreach(var property in Properties)
{
    if(property.HasGetter)
    {

            
            #line default
            #line hidden
            this.Write("\r\n        [MethodImpl(MethodImplOptions.InternalCall)]\r\n        private static ex" +
                    "tern void Get_Internal");
            
            #line 111 "D:\ReCrafted\Source\Tools\ReCrafted.Tools.APIGenerator\Templates\CSharpTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 111 "D:\ReCrafted\Source\Tools\ReCrafted.Tools.APIGenerator\Templates\CSharpTemplate.tt"
if(!property.IsStatic){
            
            #line default
            #line hidden
            this.Write("System.IntPtr nativePtr, ");
            
            #line 111 "D:\ReCrafted\Source\Tools\ReCrafted.Tools.APIGenerator\Templates\CSharpTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("out ");
            
            #line 111 "D:\ReCrafted\Source\Tools\ReCrafted.Tools.APIGenerator\Templates\CSharpTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Type.ToCSharp(true)));
            
            #line default
            #line hidden
            this.Write(" data);\r\n");
            
            #line 112 "D:\ReCrafted\Source\Tools\ReCrafted.Tools.APIGenerator\Templates\CSharpTemplate.tt"

    }
    if(property.HasSetter)
    {

            
            #line default
            #line hidden
            this.Write("\r\n        [MethodImpl(MethodImplOptions.InternalCall)]\r\n        private static ex" +
                    "tern void Set_Internal");
            
            #line 119 "D:\ReCrafted\Source\Tools\ReCrafted.Tools.APIGenerator\Templates\CSharpTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 119 "D:\ReCrafted\Source\Tools\ReCrafted.Tools.APIGenerator\Templates\CSharpTemplate.tt"
if(!property.IsStatic){
            
            #line default
            #line hidden
            this.Write("System.IntPtr nativePtr, ");
            
            #line 119 "D:\ReCrafted\Source\Tools\ReCrafted.Tools.APIGenerator\Templates\CSharpTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("ref ");
            
            #line 119 "D:\ReCrafted\Source\Tools\ReCrafted.Tools.APIGenerator\Templates\CSharpTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Type.ToCSharp(false)));
            
            #line default
            #line hidden
            this.Write(" data);\r\n");
            
            #line 120 "D:\ReCrafted\Source\Tools\ReCrafted.Tools.APIGenerator\Templates\CSharpTemplate.tt"

    }
//      /\ ---- GENERATE EXTERN PROPERTIES ---- /\
}

            
            #line default
            #line hidden
            this.Write("    }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "D:\ReCrafted\Source\Tools\ReCrafted.Tools.APIGenerator\Templates\CSharpTemplate.tt"

private global::ReCrafted.Tools.APIGenerator.Descriptions.ClassDescription _ClassField;

/// <summary>
/// Access the Class parameter of the template.
/// </summary>
private global::ReCrafted.Tools.APIGenerator.Descriptions.ClassDescription Class
{
    get
    {
        return this._ClassField;
    }
}

private global::System.Collections.Generic.List<ReCrafted.Tools.APIGenerator.Descriptions.FunctionDescription> _FunctionsField;

/// <summary>
/// Access the Functions parameter of the template.
/// </summary>
private global::System.Collections.Generic.List<ReCrafted.Tools.APIGenerator.Descriptions.FunctionDescription> Functions
{
    get
    {
        return this._FunctionsField;
    }
}

private global::System.Collections.Generic.List<ReCrafted.Tools.APIGenerator.Descriptions.PropertyDescription> _PropertiesField;

/// <summary>
/// Access the Properties parameter of the template.
/// </summary>
private global::System.Collections.Generic.List<ReCrafted.Tools.APIGenerator.Descriptions.PropertyDescription> Properties
{
    get
    {
        return this._PropertiesField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool ClassValueAcquired = false;
if (this.Session.ContainsKey("Class"))
{
    this._ClassField = ((global::ReCrafted.Tools.APIGenerator.Descriptions.ClassDescription)(this.Session["Class"]));
    ClassValueAcquired = true;
}
if ((ClassValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("Class");
    if ((data != null))
    {
        this._ClassField = ((global::ReCrafted.Tools.APIGenerator.Descriptions.ClassDescription)(data));
    }
}
bool FunctionsValueAcquired = false;
if (this.Session.ContainsKey("Functions"))
{
    this._FunctionsField = ((global::System.Collections.Generic.List<ReCrafted.Tools.APIGenerator.Descriptions.FunctionDescription>)(this.Session["Functions"]));
    FunctionsValueAcquired = true;
}
if ((FunctionsValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("Functions");
    if ((data != null))
    {
        this._FunctionsField = ((global::System.Collections.Generic.List<ReCrafted.Tools.APIGenerator.Descriptions.FunctionDescription>)(data));
    }
}
bool PropertiesValueAcquired = false;
if (this.Session.ContainsKey("Properties"))
{
    this._PropertiesField = ((global::System.Collections.Generic.List<ReCrafted.Tools.APIGenerator.Descriptions.PropertyDescription>)(this.Session["Properties"]));
    PropertiesValueAcquired = true;
}
if ((PropertiesValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("Properties");
    if ((data != null))
    {
        this._PropertiesField = ((global::System.Collections.Generic.List<ReCrafted.Tools.APIGenerator.Descriptions.PropertyDescription>)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class CSharpTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
