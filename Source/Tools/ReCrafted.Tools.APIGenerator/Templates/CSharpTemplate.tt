<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="ReCrafted.Tools.APIGenerator" #>
<#@ import namespace="ReCrafted.Tools.APIGenerator.Descriptions" #>
<#@ parameter type="ReCrafted.Tools.APIGenerator.Descriptions.ClassDescription" name="Class" #>
<#@ parameter type="System.Collections.Generic.List<ReCrafted.Tools.APIGenerator.Descriptions.FunctionDescription>" name="Functions" #>
<#@ parameter type="System.Collections.Generic.List<ReCrafted.Tools.APIGenerator.Descriptions.PropertyDescription>" name="Properties" #>
// ReCrafted (c) 2016-2019 Damian 'Erdroy' Korczowski. All rights reserved.
// WARNING: Auto-generated file. All changes will be lost when the API code will be regenerated!

<#
foreach(var usingNamespace in Generator.Instance.Usings)
{
#>
using <#=usingNamespace#>;
<#
}
#>
using System.Runtime.CompilerServices;

namespace <#=Class.Namespace#> 
{
<#
foreach(var line in Class.Comment)
{
#>
    <#=line#>
<#
}
#>
    <#=Class.GetModifiers()#> class <#=Class.Name#><#=Class.GetGenerics()#><#=Class.GetInheritance()#>
    {
<#

//      \/ ---- GENERATE FUNCTIONS ---- \/
foreach(var function in Functions)
{
    if(!function.Extern)
    {
#>
        
<#
        foreach(var line in function.Comment)
        {
#>
        <#=line#>
<#
        }
#>
        <#=function.GetModifiers()#> <#=function.ReturnType.ToCSharp()#> <#=function.Name#>(<#=function.GetCSharpParameters()#>)
        {
<#
        if(function.ReturnType.BaseType != "void")
        {
            var prefix = function.ReturnType.ByRef && !function.ReturnType.IsConst ? "ref " : "";
#>
            return <#=prefix#>Internal<#=function.Name#>(<#=function.GetCSharpParametersRedirect()#>);
<#
        }
        else
        {
#>
            Internal<#=function.Name#>(<#=function.GetCSharpParametersRedirect()#>);
<#      
        }
#>
        }
<#
    }
}
//      /\ ---- GENERATE FUNCTIONS ---- /\

//      \/ ---- GENERATE PROPERTIES ---- \/
foreach(var property in Properties)
{
#>

<#
    foreach(var line in property.Comment)
    {
#>
        <#=line#>
<#
    }
#>
        <#=property.GetModifiers()#> <#=property.Type.ToCSharp()#> <#=property.Name#>
        {
<#
    if(property.HasGetter)
    {
        var prefix = property.Type.ByRef && !property.Type.IsConst ? "ref " : "";
#>
            get
            {
                Get_Internal<#=property.Name#>(<#if(!property.IsStatic){#>NativePtr, <#}#>out var data);
                return <#=prefix#>data;
            }
<#
    }
    if(property.HasSetter)
    {
#>
            set => Set_Internal<#=property.Name#>(<#if(!property.IsStatic){#>NativePtr, <#} if(!property.ForceByValue){#>ref <#}#>value<#if(property.Type.CastToManaged){#>? value.NativePtr : System.IntPtr.Zero<#}#>);
<#
    }
#>
        }
<#
}
//      /\ ---- GENERATE PROPERTIES ---- /\

//      \/ ---- GENERATE EXTERN FUNCTIONS ---- \/
// Note: Objects passing to the C++ wrapper, does need to get pointer, not MonoObject.
foreach(var function in Functions)
{
#>

        [MethodImpl(MethodImplOptions.InternalCall)]
        private static extern <#=function.ReturnType.ToCSharp()#> Internal<#=function.Name#>(<#=function.GetCSharpParameters(true, false)#>);
<#
}
//      /\ ---- GENERATE EXTERN FUNCTIONS ---- /\

//      \/ ---- GENERATE EXTERN PROPERTIES ---- \/
#>
<#
foreach(var property in Properties)
{
    if(property.HasGetter)
    {
#>

        [MethodImpl(MethodImplOptions.InternalCall)]
        private static extern void Get_Internal<#=property.Name#>(<#if(!property.IsStatic){#>System.IntPtr nativePtr, <#}#>out <#=property.Type.ToCSharp(true, true)#> data);
<#
    }
    if(property.HasSetter)
    {
#>

        [MethodImpl(MethodImplOptions.InternalCall)]
        private static extern void Set_Internal<#=property.Name#>(<#if(!property.IsStatic){#>System.IntPtr nativePtr, <#} if(!property.ForceByValue){#>ref <#}#><#=property.Type.ToCSharp(false, true)#> data);
<#
    }
//      /\ ---- GENERATE EXTERN PROPERTIES ---- /\
}
#>
    }
}